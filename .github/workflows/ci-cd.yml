name: Test, Build and Deploy

on:
  push:
    branches: [ main, master ]

jobs:
  # 1. –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏ –ª–∏–Ω—Ç–∏–Ω–≥–∞ –∫–æ–¥–∞
  test-and-lint:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports: [5432:5432]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install flake8

    - name: Run flake8 linting
      run: |
        flake8 . --count --max-line-length=127 --statistics --exclude=migrations

    - name: Run basic tests
      env:
        DEBUG: "True"
        SECRET_KEY: "test-secret-key-${{ github.run_id }}"
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASSWORD: test_password
        DB_HOST: localhost
        DB_PORT: 5432
        ALLOWED_HOSTS: "localhost,127.0.0.1"
        TELEGRAM_BOT_TOKEN: "test:token"
      run: |
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π
        python manage.py test habits.tests.HabitModelTest --noinput -v=1
        python manage.py test habits.tests.HabitValidatorTest --noinput -v=1
        python manage.py test users.tests.UserModelTest --noinput -v=1

  # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ Docker-–æ–±—Ä–∞–∑–æ–≤
  docker-build:
    runs-on: ubuntu-latest
    needs: test-and-lint
    if: success() && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t habits-tracker .

    - name: Test Docker image
      run: |
        docker run --rm habits-tracker python -c "import django; print('Django available')"

  # 3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
  deploy:
    runs-on: ubuntu-latest
    needs: [test-and-lint, docker-build]
    if: success() && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server using SSH
      uses: appleboy/ssh-action@v0.1.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "üöÄ Starting deployment..."
          cd /opt/habits-tracker
          
          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
          docker compose down
          
          # Pull –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
          git pull origin main
          
          # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
          if [ ! -f .env ]; then
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
            echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
            echo "DEBUG=False" >> .env
            echo "ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,${{ secrets.SSH_HOST }}" >> .env
            echo "POSTGRES_DB=habits_db" >> .env
            echo "POSTGRES_USER=habits_user" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          fi
          
          # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
          docker compose up -d --build
          
          # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          sleep 10
          
          # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
          docker compose exec web python manage.py migrate --noinput
          
          # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
          docker compose exec web python manage.py collectstatic --noinput
          
          # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º nginx –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
          docker compose restart nginx
          
          echo "‚úÖ Deployment completed successfully!"
