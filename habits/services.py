import logging
import requests
from django.conf import settings
from django.core.exceptions import ValidationError
from django.utils import timezone

from .validators import HabitCompletionValidator


logger = logging.getLogger(__name__)


class TelegramService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram
    """

    BASE_URL = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}"

    @staticmethod
    def send_message(chat_id, text):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç
        :param chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        :return: –û—Ç–≤–µ—Ç –æ—Ç Telegram API
        """
        url = f"{TelegramService.BASE_URL}/sendMessage"
        payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}

        try:
            response = requests.post(url, data=payload)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return None


class HabitTrackerService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫
    """

    @staticmethod
    def mark_habit_completed(habit, user):
        """
        –û—Ç–º–µ—á–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å
        """

        today = timezone.now().date()
        if habit.completions.filter(user=user, date=today).exists():
            raise ValidationError("–≠—Ç–∞ –ø—Ä–∏–≤—ã—á–∫–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è.")

        last_completion = habit.completions.filter(user=user).order_by("-date").first()
        if last_completion:
            HabitCompletionValidator.validate_habit_completion(
                habit, last_completion.date
            )

        habit.completions.create(user=user, date=today)

        return True


class HabitReminderService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö
    """

    @staticmethod
    def send_reminder_notification(
        user, habit, message_type="daily", reason=None, custom_message=None
    ):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
        """
        if custom_message:
            message = custom_message
        else:
            if message_type == "inactive":
                message = (
                    f"‚ö†Ô∏è <b>–í—ã –¥–∞–≤–Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –ø—Ä–∏–≤—ã—á–∫—É!</b>\n\n"
                    f"–ü—Ä–∏–≤—ã—á–∫–∞: <b>{habit.action}</b>\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                    f"–í—Ä–µ–º—è: <b>{habit.time.strftime('%H:%M')}</b>\n"
                    f"–ú–µ—Å—Ç–æ: <b>{habit.place}</b>\n"
                    f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É! üí™"
                )
            elif message_type == "morning":
                message = (
                    f"üåÖ <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b>\n\n"
                    f"–°–µ–≥–æ–¥–Ω—è –≤–∞—Å –∂–¥–µ—Ç –ø—Ä–∏–≤—ã—á–∫–∞: <b>{habit.action}</b>\n"
                    f"–í—Ä–µ–º—è: <b>{habit.time.strftime('%H:%M')}</b>\n"
                    f"–ú–µ—Å—Ç–æ: <b>{habit.place}</b>\n"
                    f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚ú®"
                )
            else:  # daily
                message = (
                    f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–µ</b>\n\n"
                    f"–ü—Ä–∏–≤—ã—á–∫–∞: <b>{habit.action}</b>\n"
                    f"–í—Ä–µ–º—è: <b>{habit.time.strftime('%H:%M')}</b>\n"
                    f"–ú–µ—Å—Ç–æ: <b>{habit.place}</b>\n"
                    f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{habit.duration} —Å–µ–∫—É–Ω–¥</b>"
                )

        if user.telegram_chat_id:
            result = TelegramService.send_message(user.telegram_chat_id, message)
            if result:
                logger.info(
                    f"Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.email} (Chat ID: {user.telegram_chat_id})"
                )
            else:
                logger.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.email}"
                )
        else:
            logger.warning(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {user.email}: {message}")
            logger.warning("‚ö†Ô∏è Telegram Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        return True
